"""
Django settings for geofluxus project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from geofluxus.aws_utils import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
PUBLIC_ROOT = os.path.abspath(os.path.join(PROJECT_DIR, 'public'))

# Windows settings
if os.name == 'nt':
    try:
        # checks if the GDAL library is installed and importing correctly
        # if it is, sets all variables according to its location.
        import gdal
        venv_pckpath = os.path.dirname(gdal.__file__)
        OSGEO4W = os.path.join(venv_pckpath, 'osgeo')
        os.environ['OSGEO4W_ROOT'] = OSGEO4W
        os.environ['GDAL_DATA'] = os.path.join(OSGEO4W, 'data', 'gdal')
        os.environ['PROJ_LIB'] = os.path.join(OSGEO4W, 'data', 'proj')
        os.environ['PATH'] = OSGEO4W + ";" + os.environ['PATH']
        GEOS_LIBRARY_PATH = str(os.path.join(OSGEO4W, 'geos_c.dll'))
        GDAL_LIBRARY_PATH = str(os.path.join(OSGEO4W, 'gdal204.dll'))
    except ImportError:
        # loads geolibraries from OSGeo package
        import platform
        OSGEO4W = r"C:\OSGeo4W"
        # if '64' in platform.architecture()[0]:
        #     OSGEO4W += "64"
        assert os.path.isdir(OSGEO4W), "Directory does not exist: " + OSGEO4W
        os.environ['OSGEO4W_ROOT'] = OSGEO4W
        os.environ['GDAL_DATA'] = OSGEO4W + r"\share\epsg_csv"
        os.environ['PROJ_LIB'] = OSGEO4W + r"\share\proj"
        os.environ['PATH'] = OSGEO4W + r"\bin;" + os.environ['PATH']
        GDAL_LIBRARY_PATH = OSGEO4W + r"\bin\gdal304.dll"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'b48^-g4x&z8b)6c*j9%#cr^mtlnaaz36y)0xqlr3isqrh1td2t'

ALLOWED_HOSTS = ['slca.h2020cinderela.bk.tudelft.nl',
                 'test.geofluxus.com',
                 'app.geofluxus.com',
                 '127.0.0.1',
                 'localhost']

# Application definition

INSTALLED_APPS = [
    'webpack_loader',
    'rest_framework',
    'geofluxus.apps.asmfa',
    'geofluxus.apps.login',
    'geofluxus.apps.fileshare',
    'django.contrib.gis',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAdminUser',
    # ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_datatables.renderers.DatatablesRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_datatables.filters.DatatablesFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework_datatables.pagination.DatatablesPageNumberPagination',
    'PAGE_SIZE': 50,
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler'
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'geofluxus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(PROJECT_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.static',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'geofluxus.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'geofluxus.password_validators.SpecialCharactersPasswordValidator'
    },
    {
        'NAME': 'geofluxus.password_validators.CharacterSequencePasswordValidator'
    }
]


LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/login/login'


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'nl'
LANGUAGES = (
    ('nl', 'Nederlands'),
    ('en-us', 'English'),
)
LOCALE_PATHS = [
    os.path.join(PROJECT_DIR, 'locale'),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = os.path.join(PUBLIC_ROOT, 'static')
MEDIA_ROOT = os.path.join(PUBLIC_ROOT, 'media')

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

# dir to store temporary media files
TEMP_MEDIA_ROOT = os.path.join(MEDIA_ROOT, 'tmp')

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder'
)

# login email
# production
if os.getenv('DB_HOST', None) is not None:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_USE_TLS = True
    EMAIL_PORT = 587
    EMAIL_HOST_USER = get_secret(os.environ['EMAIL_HOST_USER'])
    EMAIL_HOST_PASSWORD = get_secret(os.environ['EMAIL_HOST_PASSWORD'])
    EMAIL_USE_SSL = False
# development
else:
    EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
    EMAIL_FILE_PATH = os.path.join(PROJECT_DIR, "sent_emails")
